@model Domain.Models.DocumentFlow

@{
    ViewData["Title"] = "Edit Document";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

@using (Html.BeginForm("EditDocumentFlow", "DocumentFlow", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h2 class="text-danger">@TempData["ErrorMessage"]</h2>
        <h2 class="text-success">@TempData["SuccessMessage"]</h2>

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.Title, "Enter New Document Title", htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-5">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Content, "Enter New Document Content", htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-5">
                @Html.TextAreaFor(model => model.Content, new { @class = "form-control", rows = "5" })
                @Html.ValidationMessageFor(model => model.Content, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DocumentTypeId, "Select New Document Type", htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-5">
                @Html.DropDownListFor(
                    model => model.DocumentTypeId,
                    ViewBag.DocumentTypeList as SelectList,
                    "-- Select Document Type --",
                    new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.DocumentTypeId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StatusId, "Select New Document Status", htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-5">
                @Html.DropDownListFor(
                    model => model.StatusId,
                    ViewBag.StatusList as SelectList,
                    "-- Select Status --",
                    new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.StatusId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CreatedById, "Select New Author", htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-5">
                @Html.DropDownListFor(
                    model => model.CreatedById,
                    ViewBag.CreatedByList as SelectList,
                    "-- Select Serviceman --",
                    new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CreatedById, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CreatedDate, "Creation Date", htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-5">
                @Html.EditorFor(model => model.CreatedDate, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.CreatedDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Update" class="btn btn-success" />
                @Html.ActionLink("Back to List", "DocumentFlow", null, new { @class = "btn btn-default" })
            </div>
        </div>
    </div>
}

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}